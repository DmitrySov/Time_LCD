
Accel_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000366c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003854  08003854  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800385c  0800385c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000160  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce9a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d36  00000000  00000000  0002cf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009c0  00000000  00000000  0002f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000239d  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2cb  00000000  00000000  00032455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa01  00000000  00000000  0003f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010a121  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ee8  00000000  00000000  0010a174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037e4 	.word	0x080037e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080037e4 	.word	0x080037e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <lcd1602_Send_init_Data+0x80>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d007      	beq.n	8000598 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	b2da      	uxtb	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e006      	b.n	80005a6 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f023 0308 	bic.w	r3, r3, #8
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 80005b4:	230a      	movs	r3, #10
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	214e      	movs	r1, #78	; 0x4e
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <lcd1602_Send_init_Data+0x84>)
 80005c0:	f001 f912 	bl	80017e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80005c4:	2005      	movs	r0, #5
 80005c6:	f000 fd0b 	bl	8000fe0 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f023 0304 	bic.w	r3, r3, #4
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 80005d8:	230a      	movs	r3, #10
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	214e      	movs	r1, #78	; 0x4e
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <lcd1602_Send_init_Data+0x84>)
 80005e4:	f001 f900 	bl	80017e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f000 fcf9 	bl	8000fe0 <HAL_Delay>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	200000f4 	.word	0x200000f4

08000600 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <lcd1602_Send_data+0x74>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d007      	beq.n	8000620 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e006      	b.n	800062e <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f023 0308 	bic.w	r3, r3, #8
 8000628:	b2da      	uxtb	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800063c:	230a      	movs	r3, #10
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	214e      	movs	r1, #78	; 0x4e
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <lcd1602_Send_data+0x78>)
 8000648:	f001 f8ce 	bl	80017e8 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f023 0304 	bic.w	r3, r3, #4
 8000654:	b2da      	uxtb	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800065a:	230a      	movs	r3, #10
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	214e      	movs	r1, #78	; 0x4e
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <lcd1602_Send_data+0x78>)
 8000666:	f001 f8bf 	bl	80017e8 <HAL_I2C_Master_Transmit>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	200000f4 	.word	0x200000f4

0800067c <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000682:	2330      	movs	r3, #48	; 0x30
 8000684:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000686:	200f      	movs	r0, #15
 8000688:	f000 fcaa 	bl	8000fe0 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff72 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000694:	2005      	movs	r0, #5
 8000696:	f000 fca3 	bl	8000fe0 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff6b 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fc9c 	bl	8000fe0 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff64 	bl	8000578 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 80006b0:	2320      	movs	r3, #32
 80006b2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff5e 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 80006bc:	2320      	movs	r3, #32
 80006be:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff58 	bl	8000578 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff52 	bl	8000578 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff4c 	bl	8000578 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff46 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80006ec:	2300      	movs	r3, #0
 80006ee:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff40 	bl	8000578 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80006f8:	2310      	movs	r3, #16
 80006fa:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff3a 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff34 	bl	8000578 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000710:	2330      	movs	r3, #48	; 0x30
 8000712:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff2e 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff28 	bl	8000578 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff22 	bl	8000578 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	f023 030f 	bic.w	r3, r3, #15
 800074e:	b25b      	sxtb	r3, r3
 8000750:	f043 0309 	orr.w	r3, r3, #9
 8000754:	b25b      	sxtb	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800075a:	f107 030f 	add.w	r3, r7, #15
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff4e 	bl	8000600 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	b25b      	sxtb	r3, r3
 800076a:	f043 0309 	orr.w	r3, r3, #9
 800076e:	b25b      	sxtb	r3, r3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000774:	f107 030f 	add.w	r3, r7, #15
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff41 	bl	8000600 <lcd1602_Send_data>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e009      	b.n	80007a8 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffcd 	bl	800073c <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fd11 	bl	80001d0 <strlen>
 80007ae:	4602      	mov	r2, r0
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d8ee      	bhi.n	8000794 <lcd1602_Print_text+0xe>
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d901      	bls.n	80007da <lcd1602_SetCursor+0x1a>
		y = 3;
 80007d6:	2303      	movs	r3, #3
 80007d8:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b27      	cmp	r3, #39	; 0x27
 80007de:	d901      	bls.n	80007e4 <lcd1602_SetCursor+0x24>
		x = 39;
 80007e0:	2327      	movs	r3, #39	; 0x27
 80007e2:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <lcd1602_SetCursor+0x2e>
		adr = x;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d102      	bne.n	80007fa <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	3340      	adds	r3, #64	; 0x40
 80007f8:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d102      	bne.n	8000806 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	3314      	adds	r3, #20
 8000804:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d102      	bne.n	8000812 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3354      	adds	r3, #84	; 0x54
 8000810:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800081a:	b25b      	sxtb	r3, r3
 800081c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000820:	b25b      	sxtb	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000826:	f107 030e 	add.w	r3, r7, #14
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fee8 	bl	8000600 <lcd1602_Send_data>

	command = (adr << 4);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	b2db      	uxtb	r3, r3
 8000836:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000838:	f107 030e 	add.w	r3, r7, #14
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fedf 	bl	8000600 <lcd1602_Send_data>

}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fb53 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f837 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 f951 	bl	8000b00 <MX_GPIO_Init>
  MX_I2C1_Init();
 800085e:	f000 f893 	bl	8000988 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000862:	f000 f917 	bl	8000a94 <MX_SPI3_Init>
  MX_RTC_Init();
 8000866:	f000 f8bd 	bl	80009e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f000 fbb8 	bl	8000fe0 <HAL_Delay>
  lcd1602_Init();
 8000870:	f7ff ff04 	bl	800067c <lcd1602_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000874:	2200      	movs	r2, #0
 8000876:	4910      	ldr	r1, [pc, #64]	; (80008b8 <main+0x6c>)
 8000878:	4810      	ldr	r0, [pc, #64]	; (80008bc <main+0x70>)
 800087a:	f002 f921 	bl	8002ac0 <HAL_RTC_GetTime>
	  snprintf(time, 63, "%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <main+0x6c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main+0x6c>)
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	461a      	mov	r2, r3
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <main+0x6c>)
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	9200      	str	r2, [sp, #0]
 8000892:	460b      	mov	r3, r1
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <main+0x74>)
 8000896:	213f      	movs	r1, #63	; 0x3f
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <main+0x78>)
 800089a:	f002 fb6f 	bl	8002f7c <sniprintf>

	  //lcd1602_Clean();
	  lcd1602_SetCursor(0, 0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff8d 	bl	80007c0 <lcd1602_SetCursor>
	  lcd1602_Print_text(time);
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <main+0x78>)
 80008a8:	f7ff ff6d 	bl	8000786 <lcd1602_Print_text>

	  HAL_Delay(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f000 fb96 	bl	8000fe0 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008b4:	e7de      	b.n	8000874 <main+0x28>
 80008b6:	bf00      	nop
 80008b8:	20000090 	.word	0x20000090
 80008bc:	200001a0 	.word	0x200001a0
 80008c0:	080037fc 	.word	0x080037fc
 80008c4:	200000a8 	.word	0x200000a8

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fb48 	bl	8002f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <SystemClock_Config+0xb8>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a22      	ldr	r2, [pc, #136]	; (8000980 <SystemClock_Config+0xb8>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <SystemClock_Config+0xb8>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <SystemClock_Config+0xbc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <SystemClock_Config+0xbc>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <SystemClock_Config+0xbc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000924:	230a      	movs	r3, #10
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2310      	movs	r3, #16
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fa5b 	bl	8001df8 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000948:	f000 f954 	bl	8000bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fcbe 	bl	80022e8 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000972:	f000 f93f 	bl	8000bf4 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x50>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_I2C1_Init+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C1_Init+0x50>)
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x58>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C1_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_I2C1_Init+0x50>)
 80009c6:	f000 fdcb 	bl	8001560 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 f910 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000f4 	.word	0x200000f4
 80009dc:	40005400 	.word	0x40005400
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_RTC_Init+0xa0>)
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_RTC_Init+0xa4>)
 80009ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_RTC_Init+0xa0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_RTC_Init+0xa0>)
 80009f6:	227f      	movs	r2, #127	; 0x7f
 80009f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 80009fa:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_RTC_Init+0xa0>)
 80009fc:	22f9      	movs	r2, #249	; 0xf9
 80009fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a14:	f001 ff06 	bl	8002824 <HAL_RTC_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a1e:	f000 f8e9 	bl	8000bf4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 10;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a2a:	220a      	movs	r2, #10
 8000a2c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a40:	2200      	movs	r2, #0
 8000a42:	4912      	ldr	r1, [pc, #72]	; (8000a8c <MX_RTC_Init+0xa8>)
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a46:	f001 ff7e 	bl	8002946 <HAL_RTC_SetTime>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_RTC_Init+0x70>
  {
    Error_Handler();
 8000a50:	f000 f8d0 	bl	8000bf4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a56:	2205      	movs	r2, #5
 8000a58:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 28;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a62:	221c      	movs	r2, #28
 8000a64:	709a      	strb	r2, [r3, #2]
  sDate.Year = 22;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a68:	2216      	movs	r2, #22
 8000a6a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <MX_RTC_Init+0xac>)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_RTC_Init+0xa0>)
 8000a72:	f002 f883 	bl	8002b7c <HAL_RTC_SetDate>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 f8ba 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200001a0 	.word	0x200001a0
 8000a88:	40002800 	.word	0x40002800
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	200000a4 	.word	0x200000a4

08000a94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_SPI3_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_SPI3_Init+0x64>)
 8000ae6:	f002 f980 	bl	8002dea <HAL_SPI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000af0:	f000 f880 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000148 	.word	0x20000148
 8000afc:	40003c00 	.word	0x40003c00

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_GPIO_Init+0xec>)
 8000ba8:	f000 fcc0 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bac:	2308      	movs	r3, #8
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480a      	ldr	r0, [pc, #40]	; (8000bec <MX_GPIO_Init+0xec>)
 8000bc4:	f000 fb16 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0xf0>)
 8000bdc:	f000 fb0a 	bl	80011f4 <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_I2C_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <HAL_I2C_MspInit+0x8c>)
 8000caa:	f000 faa3 	bl	80011f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_RTC_MspInit+0x4c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d111      	bne.n	8000d24 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d00:	2302      	movs	r3, #2
 8000d02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d08:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fca6 	bl	8002660 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d1a:	f7ff ff6b 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_RTC_MspInit+0x50>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40002800 	.word	0x40002800
 8000d30:	42470e3c 	.word	0x42470e3c

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12c      	bne.n	8000db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da0:	2306      	movs	r3, #6
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000dac:	f000 fa22 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40003c00 	.word	0x40003c00
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f8c6 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 f858 	bl	8002efc <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200000e8 	.word	0x200000e8
 8000e80:	200001d8 	.word	0x200001d8

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd7 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f817 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fcb7 	bl	800084c <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000eec:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000ef0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ef4:	200001d4 	.word	0x200001d4

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f931 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe66 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f93b 	bl	80011da <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f911 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	200001c0 	.word	0x200001c0

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001c0 	.word	0x200001c0

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff47 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5c 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb0 	bl	8001148 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e16b      	b.n	80014e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 815a 	bne.w	80014e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d005      	beq.n	8001246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	2b02      	cmp	r3, #2
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d017      	beq.n	80012e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d123      	bne.n	8001338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80b4 	beq.w	80014e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b60      	ldr	r3, [pc, #384]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <HAL_GPIO_Init+0x30c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <HAL_GPIO_Init+0x30c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a5b      	ldr	r2, [pc, #364]	; (8001504 <HAL_GPIO_Init+0x310>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d02b      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a51      	ldr	r2, [pc, #324]	; (800150c <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d025      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a50      	ldr	r2, [pc, #320]	; (8001510 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d01f      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d019      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x324>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x328>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00d      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d007      	beq.n	8001402 <HAL_GPIO_Init+0x20e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d101      	bne.n	80013fe <HAL_GPIO_Init+0x20a>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00e      	b.n	800141c <HAL_GPIO_Init+0x228>
 80013fe:	2308      	movs	r3, #8
 8001400:	e00c      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001402:	2306      	movs	r3, #6
 8001404:	e00a      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001406:	2305      	movs	r3, #5
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140a:	2304      	movs	r3, #4
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x228>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x228>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x228>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x310>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_GPIO_Init+0x334>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145e:	4a32      	ldr	r2, [pc, #200]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001488:	4a27      	ldr	r2, [pc, #156]	; (8001528 <HAL_GPIO_Init+0x334>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x334>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f ae90 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40021400 	.word	0x40021400
 8001520:	40021800 	.word	0x40021800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12b      	b.n	80017ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fb62 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	; 0x24
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c4:	f001 f838 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a81      	ldr	r2, [pc, #516]	; (80017d4 <HAL_I2C_Init+0x274>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d807      	bhi.n	80015e4 <HAL_I2C_Init+0x84>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <HAL_I2C_Init+0x278>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf94      	ite	ls
 80015dc:	2301      	movls	r3, #1
 80015de:	2300      	movhi	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e006      	b.n	80015f2 <HAL_I2C_Init+0x92>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a7d      	ldr	r2, [pc, #500]	; (80017dc <HAL_I2C_Init+0x27c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf94      	ite	ls
 80015ec:	2301      	movls	r3, #1
 80015ee:	2300      	movhi	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e7      	b.n	80017ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4a78      	ldr	r2, [pc, #480]	; (80017e0 <HAL_I2C_Init+0x280>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a6a      	ldr	r2, [pc, #424]	; (80017d4 <HAL_I2C_Init+0x274>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d802      	bhi.n	8001634 <HAL_I2C_Init+0xd4>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3301      	adds	r3, #1
 8001632:	e009      	b.n	8001648 <HAL_I2C_Init+0xe8>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_I2C_Init+0x284>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	3301      	adds	r3, #1
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	430b      	orrs	r3, r1
 800164e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800165a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	495c      	ldr	r1, [pc, #368]	; (80017d4 <HAL_I2C_Init+0x274>)
 8001664:	428b      	cmp	r3, r1
 8001666:	d819      	bhi.n	800169c <HAL_I2C_Init+0x13c>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e59      	subs	r1, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fbb1 f3f3 	udiv	r3, r1, r3
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800167c:	400b      	ands	r3, r1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <HAL_I2C_Init+0x138>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e59      	subs	r1, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	e051      	b.n	800173c <HAL_I2C_Init+0x1dc>
 8001698:	2304      	movs	r3, #4
 800169a:	e04f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_I2C_Init+0x168>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e012      	b.n	80016ee <HAL_I2C_Init+0x18e>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x196>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e022      	b.n	800173c <HAL_I2C_Init+0x1dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_I2C_Init+0x1bc>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	e00f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800176a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6911      	ldr	r1, [r2, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	000186a0 	.word	0x000186a0
 80017d8:	001e847f 	.word	0x001e847f
 80017dc:	003d08ff 	.word	0x003d08ff
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fbe4 	bl	8000fc8 <HAL_GetTick>
 8001800:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	f040 80e0 	bne.w	80019d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2319      	movs	r3, #25
 8001816:	2201      	movs	r2, #1
 8001818:	4970      	ldr	r1, [pc, #448]	; (80019dc <HAL_I2C_Master_Transmit+0x1f4>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f964 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	e0d3      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x50>
 8001834:	2302      	movs	r3, #2
 8001836:	e0cc      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d007      	beq.n	800185e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2221      	movs	r2, #33	; 0x21
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a50      	ldr	r2, [pc, #320]	; (80019e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f89c 	bl	80019e4 <I2C_MasterRequestWrite>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e08d      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018cc:	e066      	b.n	800199c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 f9de 	bl	8001c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00d      	beq.n	80018fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d107      	bne.n	80018f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d11b      	bne.n	8001970 <HAL_I2C_Master_Transmit+0x188>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d017      	beq.n	8001970 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6a39      	ldr	r1, [r7, #32]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f9ce 	bl	8001d16 <I2C_WaitOnBTFFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e01a      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d194      	bne.n	80018ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e000      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2302      	movs	r3, #2
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	00100002 	.word	0x00100002
 80019e0:	ffff0000 	.word	0xffff0000

080019e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	460b      	mov	r3, r1
 80019f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d006      	beq.n	8001a0e <I2C_MasterRequestWrite+0x2a>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d003      	beq.n	8001a0e <I2C_MasterRequestWrite+0x2a>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a0c:	d108      	bne.n	8001a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e00b      	b.n	8001a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	2b12      	cmp	r3, #18
 8001a26:	d107      	bne.n	8001a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f84f 	bl	8001ae8 <I2C_WaitOnFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	d103      	bne.n	8001a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e035      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a74:	d108      	bne.n	8001a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	e01b      	b.n	8001ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	11db      	asrs	r3, r3, #7
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0306 	and.w	r3, r3, #6
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f063 030f 	orn	r3, r3, #15
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <I2C_MasterRequestWrite+0xfc>)
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f875 	bl	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e010      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ab6:	897b      	ldrh	r3, [r7, #10]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <I2C_MasterRequestWrite+0x100>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f865 	bl	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	00010008 	.word	0x00010008
 8001ae4:	00010002 	.word	0x00010002

08001ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af8:	e025      	b.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d021      	beq.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7ff fa61 	bl	8000fc8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d116      	bne.n	8001b46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0220 	orr.w	r2, r3, #32
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e023      	b.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	e00c      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d0b6      	beq.n	8001afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba4:	e051      	b.n	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb4:	d123      	bne.n	8001bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f043 0204 	orr.w	r2, r3, #4
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e046      	b.n	8001c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d021      	beq.n	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff f9df 	bl	8000fc8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d116      	bne.n	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e020      	b.n	8001c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10c      	bne.n	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	e00b      	b.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	43da      	mvns	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf14      	ite	ne
 8001c80:	2301      	movne	r3, #1
 8001c82:	2300      	moveq	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d18d      	bne.n	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ca0:	e02d      	b.n	8001cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f878 	bl	8001d98 <I2C_IsAcknowledgeFailed>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e02d      	b.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d021      	beq.n	8001cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cba:	f7ff f985 	bl	8000fc8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d302      	bcc.n	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d116      	bne.n	8001cfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e007      	b.n	8001d0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d1ca      	bne.n	8001ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d22:	e02d      	b.n	8001d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f837 	bl	8001d98 <I2C_IsAcknowledgeFailed>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e02d      	b.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3a:	d021      	beq.n	8001d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3c:	f7ff f944 	bl	8000fc8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d302      	bcc.n	8001d52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e007      	b.n	8001d90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d1ca      	bne.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dae:	d11b      	bne.n	8001de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e264      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d075      	beq.n	8001f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	4ba3      	ldr	r3, [pc, #652]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d00c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b9d      	ldr	r3, [pc, #628]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b99      	ldr	r3, [pc, #612]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d157      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e23f      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x74>
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a90      	ldr	r2, [pc, #576]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a8a      	ldr	r2, [pc, #552]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b88      	ldr	r3, [pc, #544]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a87      	ldr	r2, [pc, #540]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e90:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a83      	ldr	r2, [pc, #524]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b81      	ldr	r3, [pc, #516]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f88a 	bl	8000fc8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f886 	bl	8000fc8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e204      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f876 	bl	8000fc8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f872 	bl	8000fc8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1f0      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xe8>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c4      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4952      	ldr	r1, [pc, #328]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_OscConfig+0x2b0>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f82b 	bl	8000fc8 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff f827 	bl	8000fc8 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a5      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4940      	ldr	r1, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_OscConfig+0x2b0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f80a 	bl	8000fc8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f806 	bl	8000fc8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e184      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d030      	beq.n	8002044 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x2b4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe ffea 	bl	8000fc8 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe ffe6 	bl	8000fc8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e164      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8002016:	e015      	b.n	8002044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x2b4>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffd3 	bl	8000fc8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7fe ffcf 	bl	8000fc8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e14d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a0 	beq.w	8002192 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_RCC_OscConfig+0x2b8>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209a:	f7fe ff95 	bl	8000fc8 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	e011      	b.n	80020c6 <HAL_RCC_OscConfig+0x2ce>
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
 80020b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe ff88 	bl	8000fc8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e106      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b85      	ldr	r3, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x4e4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d106      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
 80020da:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
 80020e6:	e01c      	b.n	8002122 <HAL_RCC_OscConfig+0x32a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020f0:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a7a      	ldr	r2, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
 80020fc:	4b78      	ldr	r3, [pc, #480]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a77      	ldr	r2, [pc, #476]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x32a>
 800210a:	4b75      	ldr	r3, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	4a74      	ldr	r2, [pc, #464]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	; 0x70
 8002116:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a71      	ldr	r2, [pc, #452]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800211c:	f023 0304 	bic.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe ff4d 	bl	8000fc8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe ff49 	bl	8000fc8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0c5      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ee      	beq.n	8002132 <HAL_RCC_OscConfig+0x33a>
 8002154:	e014      	b.n	8002180 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7fe ff37 	bl	8000fc8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe ff33 	bl	8000fc8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0af      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1ee      	bne.n	800215e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a55      	ldr	r2, [pc, #340]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 809b 	beq.w	80022d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d05c      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d141      	bne.n	8002234 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b0:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe ff07 	bl	8000fc8 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe ff03 	bl	8000fc8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e081      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	019b      	lsls	r3, r3, #6
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	3b01      	subs	r3, #1
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	4937      	ldr	r1, [pc, #220]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fedc 	bl	8000fc8 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fed8 	bl	8000fc8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e056      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x41c>
 8002232:	e04e      	b.n	80022d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fec5 	bl	8000fc8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fec1 	bl	8000fc8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e03f      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x44a>
 8002260:	e037      	b.n	80022d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e032      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_RCC_OscConfig+0x4e8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d028      	beq.n	80022ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d121      	bne.n	80022ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d11a      	bne.n	80022ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d111      	bne.n	80022ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40007000 	.word	0x40007000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	42470060 	.word	0x42470060

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fdf6 	bl	8000fc8 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fdf2 	bl	8000fc8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd56 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08003808 	.word	0x08003808
 80024ac:	20000004 	.word	0x20000004
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ba:	2100      	movs	r1, #0
 80024bc:	6079      	str	r1, [r7, #4]
 80024be:	2100      	movs	r1, #0
 80024c0:	60f9      	str	r1, [r7, #12]
 80024c2:	2100      	movs	r1, #0
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024c6:	2100      	movs	r1, #0
 80024c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ca:	4952      	ldr	r1, [pc, #328]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024cc:	6889      	ldr	r1, [r1, #8]
 80024ce:	f001 010c 	and.w	r1, r1, #12
 80024d2:	2908      	cmp	r1, #8
 80024d4:	d00d      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80024d6:	2908      	cmp	r1, #8
 80024d8:	f200 8094 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x150>
 80024dc:	2900      	cmp	r1, #0
 80024de:	d002      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x32>
 80024e0:	2904      	cmp	r1, #4
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x38>
 80024e4:	e08e      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_GetSysClockFreq+0x164>)
 80024e8:	60bb      	str	r3, [r7, #8]
       break;
 80024ea:	e08e      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 80024ee:	60bb      	str	r3, [r7, #8]
      break;
 80024f0:	e08b      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f2:	4948      	ldr	r1, [pc, #288]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024f4:	6849      	ldr	r1, [r1, #4]
 80024f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fc:	4945      	ldr	r1, [pc, #276]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024fe:	6849      	ldr	r1, [r1, #4]
 8002500:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002504:	2900      	cmp	r1, #0
 8002506:	d024      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4942      	ldr	r1, [pc, #264]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	0989      	lsrs	r1, r1, #6
 800250e:	4608      	mov	r0, r1
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002518:	f04f 0500 	mov.w	r5, #0
 800251c:	ea00 0204 	and.w	r2, r0, r4
 8002520:	ea01 0305 	and.w	r3, r1, r5
 8002524:	493d      	ldr	r1, [pc, #244]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 8002526:	fb01 f003 	mul.w	r0, r1, r3
 800252a:	2100      	movs	r1, #0
 800252c:	fb01 f102 	mul.w	r1, r1, r2
 8002530:	1844      	adds	r4, r0, r1
 8002532:	493a      	ldr	r1, [pc, #232]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 8002534:	fba2 0101 	umull	r0, r1, r2, r1
 8002538:	1863      	adds	r3, r4, r1
 800253a:	4619      	mov	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f7fd fe9c 	bl	8000280 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e04a      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	461a      	mov	r2, r3
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	ea02 0400 	and.w	r4, r2, r0
 800256a:	ea03 0501 	and.w	r5, r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	014b      	lsls	r3, r1, #5
 800257c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002580:	0142      	lsls	r2, r0, #5
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	1b00      	subs	r0, r0, r4
 8002588:	eb61 0105 	sbc.w	r1, r1, r5
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	018b      	lsls	r3, r1, #6
 8002596:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800259a:	0182      	lsls	r2, r0, #6
 800259c:	1a12      	subs	r2, r2, r0
 800259e:	eb63 0301 	sbc.w	r3, r3, r1
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	00d9      	lsls	r1, r3, #3
 80025ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b0:	00d0      	lsls	r0, r2, #3
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	1912      	adds	r2, r2, r4
 80025b8:	eb45 0303 	adc.w	r3, r5, r3
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	0299      	lsls	r1, r3, #10
 80025c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025ca:	0290      	lsls	r0, r2, #10
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f7fd fe50 	bl	8000280 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	60bb      	str	r3, [r7, #8]
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_GetSysClockFreq+0x164>)
 8002606:	60bb      	str	r3, [r7, #8]
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	68bb      	ldr	r3, [r7, #8]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	017d7840 	.word	0x017d7840

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08003818 	.word	0x08003818

08002660 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002684:	2b00      	cmp	r3, #0
 8002686:	d035      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002688:	4b62      	ldr	r3, [pc, #392]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800268e:	f7fe fc9b 	bl	8000fc8 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002696:	f7fe fc97 	bl	8000fc8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0b0      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a8:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	019a      	lsls	r2, r3, #6
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	071b      	lsls	r3, r3, #28
 80026c0:	4955      	ldr	r1, [pc, #340]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026ce:	f7fe fc7b 	bl	8000fc8 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026d6:	f7fe fc77 	bl	8000fc8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e090      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8083 	beq.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b44      	ldr	r3, [pc, #272]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a43      	ldr	r2, [pc, #268]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3e      	ldr	r2, [pc, #248]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800272a:	f7fe fc4d 	bl	8000fc8 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fc49 	bl	8000fc8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e062      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002758:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d028      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002776:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d114      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fc17 	bl	8000fc8 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fc13 	bl	8000fc8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e02a      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ee      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027cc:	d10d      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e2:	490d      	ldr	r1, [pc, #52]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
 80027e8:	e005      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	4905      	ldr	r1, [pc, #20]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	42470068 	.word	0x42470068
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000
 8002820:	42470e40 	.word	0x42470e40

08002824 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e083      	b.n	800293e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7f5b      	ldrb	r3, [r3, #29]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fa4a 	bl	8000ce0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	22ca      	movs	r2, #202	; 0xca
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2253      	movs	r2, #83	; 0x53
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa59 	bl	8002d1a <RTC_EnterInitMode>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e05e      	b.n	800293e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800288e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002892:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6919      	ldr	r1, [r3, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9eb 	bl	8002cca <HAL_RTC_WaitForSynchro>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2204      	movs	r2, #4
 8002906:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e018      	b.n	800293e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	22ff      	movs	r2, #255	; 0xff
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b087      	sub	sp, #28
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_RTC_SetTime+0x1c>
 800295e:	2302      	movs	r3, #2
 8002960:	e0aa      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2202      	movs	r2, #2
 800296c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d126      	bne.n	80029c2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 f9f0 	bl	8002d72 <RTC_ByteToBcd2>
 8002992:	4603      	mov	r3, r0
 8002994:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9e9 	bl	8002d72 <RTC_ByteToBcd2>
 80029a0:	4603      	mov	r3, r0
 80029a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029a4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	789b      	ldrb	r3, [r3, #2]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f9e1 	bl	8002d72 <RTC_ByteToBcd2>
 80029b0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80029b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e018      	b.n	80029f4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80029e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	22ca      	movs	r2, #202	; 0xca
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2253      	movs	r2, #83	; 0x53
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f988 	bl	8002d1a <RTC_EnterInitMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e047      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a36:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a46:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f923 	bl	8002cca <HAL_RTC_WaitForSynchro>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	22ff      	movs	r2, #255	; 0xff
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002af2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002af6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f934 	bl	8002dae <RTC_Bcd2ToByte>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f92b 	bl	8002dae <RTC_Bcd2ToByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	789b      	ldrb	r3, [r3, #2]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f922 	bl	8002dae <RTC_Bcd2ToByte>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	7f1b      	ldrb	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_RTC_SetDate+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e094      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_RTC_SetDate+0x4c>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	330a      	adds	r3, #10
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f8cd 	bl	8002d72 <RTC_ByteToBcd2>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f8c6 	bl	8002d72 <RTC_ByteToBcd2>
 8002be6:	4603      	mov	r3, r0
 8002be8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	789b      	ldrb	r3, [r3, #2]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f8be 	bl	8002d72 <RTC_ByteToBcd2>
 8002bf6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bf8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e00e      	b.n	8002c26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	78db      	ldrb	r3, [r3, #3]
 8002c0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c14:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22ca      	movs	r2, #202	; 0xca
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2253      	movs	r2, #83	; 0x53
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f86f 	bl	8002d1a <RTC_EnterInitMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e033      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f81e 	bl	8002cca <HAL_RTC_WaitForSynchro>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00a      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ce4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce6:	f7fe f96f 	bl	8000fc8 <HAL_GetTick>
 8002cea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002cec:	e009      	b.n	8002d02 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002cee:	f7fe f96b 	bl	8000fc8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfc:	d901      	bls.n	8002d02 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e007      	b.n	8002d12 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ee      	beq.n	8002cee <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d119      	bne.n	8002d68 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe f943 	bl	8000fc8 <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d44:	e009      	b.n	8002d5a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d46:	f7fe f93f 	bl	8000fc8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d54:	d901      	bls.n	8002d5a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e007      	b.n	8002d6a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ee      	beq.n	8002d46 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002d80:	e005      	b.n	8002d8e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3301      	adds	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	3b0a      	subs	r3, #10
 8002d8c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d8f6      	bhi.n	8002d82 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b2db      	uxtb	r3, r3
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e07b      	b.n	8002ef4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d108      	bne.n	8002e16 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e0c:	d009      	beq.n	8002e22 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	61da      	str	r2, [r3, #28]
 8002e14:	e005      	b.n	8002e22 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fd ff79 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	ea42 0103 	orr.w	r1, r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	f003 0104 	and.w	r1, r3, #4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0210 	and.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <__errno>:
 8002efc:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <__errno+0x8>)
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20000010 	.word	0x20000010

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	4d0d      	ldr	r5, [pc, #52]	; (8002f40 <__libc_init_array+0x38>)
 8002f0c:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	2600      	movs	r6, #0
 8002f14:	42a6      	cmp	r6, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	4d0b      	ldr	r5, [pc, #44]	; (8002f48 <__libc_init_array+0x40>)
 8002f1a:	4c0c      	ldr	r4, [pc, #48]	; (8002f4c <__libc_init_array+0x44>)
 8002f1c:	f000 fc62 	bl	80037e4 <_init>
 8002f20:	1b64      	subs	r4, r4, r5
 8002f22:	10a4      	asrs	r4, r4, #2
 8002f24:	2600      	movs	r6, #0
 8002f26:	42a6      	cmp	r6, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f30:	4798      	blx	r3
 8002f32:	3601      	adds	r6, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f3a:	4798      	blx	r3
 8002f3c:	3601      	adds	r6, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	0800385c 	.word	0x0800385c
 8002f44:	0800385c 	.word	0x0800385c
 8002f48:	0800385c 	.word	0x0800385c
 8002f4c:	08003860 	.word	0x08003860

08002f50 <memcpy>:
 8002f50:	440a      	add	r2, r1
 8002f52:	4291      	cmp	r1, r2
 8002f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f58:	d100      	bne.n	8002f5c <memcpy+0xc>
 8002f5a:	4770      	bx	lr
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f66:	4291      	cmp	r1, r2
 8002f68:	d1f9      	bne.n	8002f5e <memcpy+0xe>
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <memset>:
 8002f6c:	4402      	add	r2, r0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d100      	bne.n	8002f76 <memset+0xa>
 8002f74:	4770      	bx	lr
 8002f76:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7a:	e7f9      	b.n	8002f70 <memset+0x4>

08002f7c <sniprintf>:
 8002f7c:	b40c      	push	{r2, r3}
 8002f7e:	b530      	push	{r4, r5, lr}
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <sniprintf+0x64>)
 8002f82:	1e0c      	subs	r4, r1, #0
 8002f84:	681d      	ldr	r5, [r3, #0]
 8002f86:	b09d      	sub	sp, #116	; 0x74
 8002f88:	da08      	bge.n	8002f9c <sniprintf+0x20>
 8002f8a:	238b      	movs	r3, #139	; 0x8b
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	b01d      	add	sp, #116	; 0x74
 8002f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f98:	b002      	add	sp, #8
 8002f9a:	4770      	bx	lr
 8002f9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002fa4:	bf14      	ite	ne
 8002fa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002faa:	4623      	moveq	r3, r4
 8002fac:	9304      	str	r3, [sp, #16]
 8002fae:	9307      	str	r3, [sp, #28]
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	9002      	str	r0, [sp, #8]
 8002fb6:	9006      	str	r0, [sp, #24]
 8002fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002fbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002fbe:	ab21      	add	r3, sp, #132	; 0x84
 8002fc0:	a902      	add	r1, sp, #8
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	f000 f869 	bl	800309c <_svfiprintf_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	bfbc      	itt	lt
 8002fce:	238b      	movlt	r3, #139	; 0x8b
 8002fd0:	602b      	strlt	r3, [r5, #0]
 8002fd2:	2c00      	cmp	r4, #0
 8002fd4:	d0dd      	beq.n	8002f92 <sniprintf+0x16>
 8002fd6:	9b02      	ldr	r3, [sp, #8]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e7d9      	b.n	8002f92 <sniprintf+0x16>
 8002fde:	bf00      	nop
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <__ssputs_r>:
 8002fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	688e      	ldr	r6, [r1, #8]
 8002fea:	429e      	cmp	r6, r3
 8002fec:	4682      	mov	sl, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	4690      	mov	r8, r2
 8002ff2:	461f      	mov	r7, r3
 8002ff4:	d838      	bhi.n	8003068 <__ssputs_r+0x84>
 8002ff6:	898a      	ldrh	r2, [r1, #12]
 8002ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ffc:	d032      	beq.n	8003064 <__ssputs_r+0x80>
 8002ffe:	6825      	ldr	r5, [r4, #0]
 8003000:	6909      	ldr	r1, [r1, #16]
 8003002:	eba5 0901 	sub.w	r9, r5, r1
 8003006:	6965      	ldr	r5, [r4, #20]
 8003008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800300c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003010:	3301      	adds	r3, #1
 8003012:	444b      	add	r3, r9
 8003014:	106d      	asrs	r5, r5, #1
 8003016:	429d      	cmp	r5, r3
 8003018:	bf38      	it	cc
 800301a:	461d      	movcc	r5, r3
 800301c:	0553      	lsls	r3, r2, #21
 800301e:	d531      	bpl.n	8003084 <__ssputs_r+0xa0>
 8003020:	4629      	mov	r1, r5
 8003022:	f000 fb39 	bl	8003698 <_malloc_r>
 8003026:	4606      	mov	r6, r0
 8003028:	b950      	cbnz	r0, 8003040 <__ssputs_r+0x5c>
 800302a:	230c      	movs	r3, #12
 800302c:	f8ca 3000 	str.w	r3, [sl]
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003036:	81a3      	strh	r3, [r4, #12]
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003040:	6921      	ldr	r1, [r4, #16]
 8003042:	464a      	mov	r2, r9
 8003044:	f7ff ff84 	bl	8002f50 <memcpy>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800304e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003052:	81a3      	strh	r3, [r4, #12]
 8003054:	6126      	str	r6, [r4, #16]
 8003056:	6165      	str	r5, [r4, #20]
 8003058:	444e      	add	r6, r9
 800305a:	eba5 0509 	sub.w	r5, r5, r9
 800305e:	6026      	str	r6, [r4, #0]
 8003060:	60a5      	str	r5, [r4, #8]
 8003062:	463e      	mov	r6, r7
 8003064:	42be      	cmp	r6, r7
 8003066:	d900      	bls.n	800306a <__ssputs_r+0x86>
 8003068:	463e      	mov	r6, r7
 800306a:	4632      	mov	r2, r6
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	4641      	mov	r1, r8
 8003070:	f000 faa8 	bl	80035c4 <memmove>
 8003074:	68a3      	ldr	r3, [r4, #8]
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	1b9b      	subs	r3, r3, r6
 800307a:	4432      	add	r2, r6
 800307c:	60a3      	str	r3, [r4, #8]
 800307e:	6022      	str	r2, [r4, #0]
 8003080:	2000      	movs	r0, #0
 8003082:	e7db      	b.n	800303c <__ssputs_r+0x58>
 8003084:	462a      	mov	r2, r5
 8003086:	f000 fb61 	bl	800374c <_realloc_r>
 800308a:	4606      	mov	r6, r0
 800308c:	2800      	cmp	r0, #0
 800308e:	d1e1      	bne.n	8003054 <__ssputs_r+0x70>
 8003090:	6921      	ldr	r1, [r4, #16]
 8003092:	4650      	mov	r0, sl
 8003094:	f000 fab0 	bl	80035f8 <_free_r>
 8003098:	e7c7      	b.n	800302a <__ssputs_r+0x46>
	...

0800309c <_svfiprintf_r>:
 800309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a0:	4698      	mov	r8, r3
 80030a2:	898b      	ldrh	r3, [r1, #12]
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	b09d      	sub	sp, #116	; 0x74
 80030a8:	4607      	mov	r7, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	d50e      	bpl.n	80030ce <_svfiprintf_r+0x32>
 80030b0:	690b      	ldr	r3, [r1, #16]
 80030b2:	b963      	cbnz	r3, 80030ce <_svfiprintf_r+0x32>
 80030b4:	2140      	movs	r1, #64	; 0x40
 80030b6:	f000 faef 	bl	8003698 <_malloc_r>
 80030ba:	6028      	str	r0, [r5, #0]
 80030bc:	6128      	str	r0, [r5, #16]
 80030be:	b920      	cbnz	r0, 80030ca <_svfiprintf_r+0x2e>
 80030c0:	230c      	movs	r3, #12
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	e0d1      	b.n	800326e <_svfiprintf_r+0x1d2>
 80030ca:	2340      	movs	r3, #64	; 0x40
 80030cc:	616b      	str	r3, [r5, #20]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9309      	str	r3, [sp, #36]	; 0x24
 80030d2:	2320      	movs	r3, #32
 80030d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80030dc:	2330      	movs	r3, #48	; 0x30
 80030de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003288 <_svfiprintf_r+0x1ec>
 80030e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e6:	f04f 0901 	mov.w	r9, #1
 80030ea:	4623      	mov	r3, r4
 80030ec:	469a      	mov	sl, r3
 80030ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030f2:	b10a      	cbz	r2, 80030f8 <_svfiprintf_r+0x5c>
 80030f4:	2a25      	cmp	r2, #37	; 0x25
 80030f6:	d1f9      	bne.n	80030ec <_svfiprintf_r+0x50>
 80030f8:	ebba 0b04 	subs.w	fp, sl, r4
 80030fc:	d00b      	beq.n	8003116 <_svfiprintf_r+0x7a>
 80030fe:	465b      	mov	r3, fp
 8003100:	4622      	mov	r2, r4
 8003102:	4629      	mov	r1, r5
 8003104:	4638      	mov	r0, r7
 8003106:	f7ff ff6d 	bl	8002fe4 <__ssputs_r>
 800310a:	3001      	adds	r0, #1
 800310c:	f000 80aa 	beq.w	8003264 <_svfiprintf_r+0x1c8>
 8003110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003112:	445a      	add	r2, fp
 8003114:	9209      	str	r2, [sp, #36]	; 0x24
 8003116:	f89a 3000 	ldrb.w	r3, [sl]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80a2 	beq.w	8003264 <_svfiprintf_r+0x1c8>
 8003120:	2300      	movs	r3, #0
 8003122:	f04f 32ff 	mov.w	r2, #4294967295
 8003126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800312a:	f10a 0a01 	add.w	sl, sl, #1
 800312e:	9304      	str	r3, [sp, #16]
 8003130:	9307      	str	r3, [sp, #28]
 8003132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003136:	931a      	str	r3, [sp, #104]	; 0x68
 8003138:	4654      	mov	r4, sl
 800313a:	2205      	movs	r2, #5
 800313c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003140:	4851      	ldr	r0, [pc, #324]	; (8003288 <_svfiprintf_r+0x1ec>)
 8003142:	f7fd f84d 	bl	80001e0 <memchr>
 8003146:	9a04      	ldr	r2, [sp, #16]
 8003148:	b9d8      	cbnz	r0, 8003182 <_svfiprintf_r+0xe6>
 800314a:	06d0      	lsls	r0, r2, #27
 800314c:	bf44      	itt	mi
 800314e:	2320      	movmi	r3, #32
 8003150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003154:	0711      	lsls	r1, r2, #28
 8003156:	bf44      	itt	mi
 8003158:	232b      	movmi	r3, #43	; 0x2b
 800315a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800315e:	f89a 3000 	ldrb.w	r3, [sl]
 8003162:	2b2a      	cmp	r3, #42	; 0x2a
 8003164:	d015      	beq.n	8003192 <_svfiprintf_r+0xf6>
 8003166:	9a07      	ldr	r2, [sp, #28]
 8003168:	4654      	mov	r4, sl
 800316a:	2000      	movs	r0, #0
 800316c:	f04f 0c0a 	mov.w	ip, #10
 8003170:	4621      	mov	r1, r4
 8003172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003176:	3b30      	subs	r3, #48	; 0x30
 8003178:	2b09      	cmp	r3, #9
 800317a:	d94e      	bls.n	800321a <_svfiprintf_r+0x17e>
 800317c:	b1b0      	cbz	r0, 80031ac <_svfiprintf_r+0x110>
 800317e:	9207      	str	r2, [sp, #28]
 8003180:	e014      	b.n	80031ac <_svfiprintf_r+0x110>
 8003182:	eba0 0308 	sub.w	r3, r0, r8
 8003186:	fa09 f303 	lsl.w	r3, r9, r3
 800318a:	4313      	orrs	r3, r2
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	46a2      	mov	sl, r4
 8003190:	e7d2      	b.n	8003138 <_svfiprintf_r+0x9c>
 8003192:	9b03      	ldr	r3, [sp, #12]
 8003194:	1d19      	adds	r1, r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	9103      	str	r1, [sp, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	bfbb      	ittet	lt
 800319e:	425b      	neglt	r3, r3
 80031a0:	f042 0202 	orrlt.w	r2, r2, #2
 80031a4:	9307      	strge	r3, [sp, #28]
 80031a6:	9307      	strlt	r3, [sp, #28]
 80031a8:	bfb8      	it	lt
 80031aa:	9204      	strlt	r2, [sp, #16]
 80031ac:	7823      	ldrb	r3, [r4, #0]
 80031ae:	2b2e      	cmp	r3, #46	; 0x2e
 80031b0:	d10c      	bne.n	80031cc <_svfiprintf_r+0x130>
 80031b2:	7863      	ldrb	r3, [r4, #1]
 80031b4:	2b2a      	cmp	r3, #42	; 0x2a
 80031b6:	d135      	bne.n	8003224 <_svfiprintf_r+0x188>
 80031b8:	9b03      	ldr	r3, [sp, #12]
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	9203      	str	r2, [sp, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bfb8      	it	lt
 80031c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80031c8:	3402      	adds	r4, #2
 80031ca:	9305      	str	r3, [sp, #20]
 80031cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003298 <_svfiprintf_r+0x1fc>
 80031d0:	7821      	ldrb	r1, [r4, #0]
 80031d2:	2203      	movs	r2, #3
 80031d4:	4650      	mov	r0, sl
 80031d6:	f7fd f803 	bl	80001e0 <memchr>
 80031da:	b140      	cbz	r0, 80031ee <_svfiprintf_r+0x152>
 80031dc:	2340      	movs	r3, #64	; 0x40
 80031de:	eba0 000a 	sub.w	r0, r0, sl
 80031e2:	fa03 f000 	lsl.w	r0, r3, r0
 80031e6:	9b04      	ldr	r3, [sp, #16]
 80031e8:	4303      	orrs	r3, r0
 80031ea:	3401      	adds	r4, #1
 80031ec:	9304      	str	r3, [sp, #16]
 80031ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f2:	4826      	ldr	r0, [pc, #152]	; (800328c <_svfiprintf_r+0x1f0>)
 80031f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031f8:	2206      	movs	r2, #6
 80031fa:	f7fc fff1 	bl	80001e0 <memchr>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d038      	beq.n	8003274 <_svfiprintf_r+0x1d8>
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <_svfiprintf_r+0x1f4>)
 8003204:	bb1b      	cbnz	r3, 800324e <_svfiprintf_r+0x1b2>
 8003206:	9b03      	ldr	r3, [sp, #12]
 8003208:	3307      	adds	r3, #7
 800320a:	f023 0307 	bic.w	r3, r3, #7
 800320e:	3308      	adds	r3, #8
 8003210:	9303      	str	r3, [sp, #12]
 8003212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003214:	4433      	add	r3, r6
 8003216:	9309      	str	r3, [sp, #36]	; 0x24
 8003218:	e767      	b.n	80030ea <_svfiprintf_r+0x4e>
 800321a:	fb0c 3202 	mla	r2, ip, r2, r3
 800321e:	460c      	mov	r4, r1
 8003220:	2001      	movs	r0, #1
 8003222:	e7a5      	b.n	8003170 <_svfiprintf_r+0xd4>
 8003224:	2300      	movs	r3, #0
 8003226:	3401      	adds	r4, #1
 8003228:	9305      	str	r3, [sp, #20]
 800322a:	4619      	mov	r1, r3
 800322c:	f04f 0c0a 	mov.w	ip, #10
 8003230:	4620      	mov	r0, r4
 8003232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003236:	3a30      	subs	r2, #48	; 0x30
 8003238:	2a09      	cmp	r2, #9
 800323a:	d903      	bls.n	8003244 <_svfiprintf_r+0x1a8>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0c5      	beq.n	80031cc <_svfiprintf_r+0x130>
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	e7c3      	b.n	80031cc <_svfiprintf_r+0x130>
 8003244:	fb0c 2101 	mla	r1, ip, r1, r2
 8003248:	4604      	mov	r4, r0
 800324a:	2301      	movs	r3, #1
 800324c:	e7f0      	b.n	8003230 <_svfiprintf_r+0x194>
 800324e:	ab03      	add	r3, sp, #12
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	462a      	mov	r2, r5
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <_svfiprintf_r+0x1f8>)
 8003256:	a904      	add	r1, sp, #16
 8003258:	4638      	mov	r0, r7
 800325a:	f3af 8000 	nop.w
 800325e:	1c42      	adds	r2, r0, #1
 8003260:	4606      	mov	r6, r0
 8003262:	d1d6      	bne.n	8003212 <_svfiprintf_r+0x176>
 8003264:	89ab      	ldrh	r3, [r5, #12]
 8003266:	065b      	lsls	r3, r3, #25
 8003268:	f53f af2c 	bmi.w	80030c4 <_svfiprintf_r+0x28>
 800326c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800326e:	b01d      	add	sp, #116	; 0x74
 8003270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003274:	ab03      	add	r3, sp, #12
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	462a      	mov	r2, r5
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <_svfiprintf_r+0x1f8>)
 800327c:	a904      	add	r1, sp, #16
 800327e:	4638      	mov	r0, r7
 8003280:	f000 f87a 	bl	8003378 <_printf_i>
 8003284:	e7eb      	b.n	800325e <_svfiprintf_r+0x1c2>
 8003286:	bf00      	nop
 8003288:	08003820 	.word	0x08003820
 800328c:	0800382a 	.word	0x0800382a
 8003290:	00000000 	.word	0x00000000
 8003294:	08002fe5 	.word	0x08002fe5
 8003298:	08003826 	.word	0x08003826

0800329c <_printf_common>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	4616      	mov	r6, r2
 80032a2:	4699      	mov	r9, r3
 80032a4:	688a      	ldr	r2, [r1, #8]
 80032a6:	690b      	ldr	r3, [r1, #16]
 80032a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bfb8      	it	lt
 80032b0:	4613      	movlt	r3, r2
 80032b2:	6033      	str	r3, [r6, #0]
 80032b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b8:	4607      	mov	r7, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	b10a      	cbz	r2, 80032c2 <_printf_common+0x26>
 80032be:	3301      	adds	r3, #1
 80032c0:	6033      	str	r3, [r6, #0]
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	0699      	lsls	r1, r3, #26
 80032c6:	bf42      	ittt	mi
 80032c8:	6833      	ldrmi	r3, [r6, #0]
 80032ca:	3302      	addmi	r3, #2
 80032cc:	6033      	strmi	r3, [r6, #0]
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	f015 0506 	ands.w	r5, r5, #6
 80032d4:	d106      	bne.n	80032e4 <_printf_common+0x48>
 80032d6:	f104 0a19 	add.w	sl, r4, #25
 80032da:	68e3      	ldr	r3, [r4, #12]
 80032dc:	6832      	ldr	r2, [r6, #0]
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	42ab      	cmp	r3, r5
 80032e2:	dc26      	bgt.n	8003332 <_printf_common+0x96>
 80032e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032e8:	1e13      	subs	r3, r2, #0
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	bf18      	it	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	0692      	lsls	r2, r2, #26
 80032f2:	d42b      	bmi.n	800334c <_printf_common+0xb0>
 80032f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f8:	4649      	mov	r1, r9
 80032fa:	4638      	mov	r0, r7
 80032fc:	47c0      	blx	r8
 80032fe:	3001      	adds	r0, #1
 8003300:	d01e      	beq.n	8003340 <_printf_common+0xa4>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	68e5      	ldr	r5, [r4, #12]
 8003306:	6832      	ldr	r2, [r6, #0]
 8003308:	f003 0306 	and.w	r3, r3, #6
 800330c:	2b04      	cmp	r3, #4
 800330e:	bf08      	it	eq
 8003310:	1aad      	subeq	r5, r5, r2
 8003312:	68a3      	ldr	r3, [r4, #8]
 8003314:	6922      	ldr	r2, [r4, #16]
 8003316:	bf0c      	ite	eq
 8003318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800331c:	2500      	movne	r5, #0
 800331e:	4293      	cmp	r3, r2
 8003320:	bfc4      	itt	gt
 8003322:	1a9b      	subgt	r3, r3, r2
 8003324:	18ed      	addgt	r5, r5, r3
 8003326:	2600      	movs	r6, #0
 8003328:	341a      	adds	r4, #26
 800332a:	42b5      	cmp	r5, r6
 800332c:	d11a      	bne.n	8003364 <_printf_common+0xc8>
 800332e:	2000      	movs	r0, #0
 8003330:	e008      	b.n	8003344 <_printf_common+0xa8>
 8003332:	2301      	movs	r3, #1
 8003334:	4652      	mov	r2, sl
 8003336:	4649      	mov	r1, r9
 8003338:	4638      	mov	r0, r7
 800333a:	47c0      	blx	r8
 800333c:	3001      	adds	r0, #1
 800333e:	d103      	bne.n	8003348 <_printf_common+0xac>
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003348:	3501      	adds	r5, #1
 800334a:	e7c6      	b.n	80032da <_printf_common+0x3e>
 800334c:	18e1      	adds	r1, r4, r3
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	2030      	movs	r0, #48	; 0x30
 8003352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003356:	4422      	add	r2, r4
 8003358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800335c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003360:	3302      	adds	r3, #2
 8003362:	e7c7      	b.n	80032f4 <_printf_common+0x58>
 8003364:	2301      	movs	r3, #1
 8003366:	4622      	mov	r2, r4
 8003368:	4649      	mov	r1, r9
 800336a:	4638      	mov	r0, r7
 800336c:	47c0      	blx	r8
 800336e:	3001      	adds	r0, #1
 8003370:	d0e6      	beq.n	8003340 <_printf_common+0xa4>
 8003372:	3601      	adds	r6, #1
 8003374:	e7d9      	b.n	800332a <_printf_common+0x8e>
	...

08003378 <_printf_i>:
 8003378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800337c:	460c      	mov	r4, r1
 800337e:	4691      	mov	r9, r2
 8003380:	7e27      	ldrb	r7, [r4, #24]
 8003382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003384:	2f78      	cmp	r7, #120	; 0x78
 8003386:	4680      	mov	r8, r0
 8003388:	469a      	mov	sl, r3
 800338a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800338e:	d807      	bhi.n	80033a0 <_printf_i+0x28>
 8003390:	2f62      	cmp	r7, #98	; 0x62
 8003392:	d80a      	bhi.n	80033aa <_printf_i+0x32>
 8003394:	2f00      	cmp	r7, #0
 8003396:	f000 80d8 	beq.w	800354a <_printf_i+0x1d2>
 800339a:	2f58      	cmp	r7, #88	; 0x58
 800339c:	f000 80a3 	beq.w	80034e6 <_printf_i+0x16e>
 80033a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033a8:	e03a      	b.n	8003420 <_printf_i+0xa8>
 80033aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033ae:	2b15      	cmp	r3, #21
 80033b0:	d8f6      	bhi.n	80033a0 <_printf_i+0x28>
 80033b2:	a001      	add	r0, pc, #4	; (adr r0, 80033b8 <_printf_i+0x40>)
 80033b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033b8:	08003411 	.word	0x08003411
 80033bc:	08003425 	.word	0x08003425
 80033c0:	080033a1 	.word	0x080033a1
 80033c4:	080033a1 	.word	0x080033a1
 80033c8:	080033a1 	.word	0x080033a1
 80033cc:	080033a1 	.word	0x080033a1
 80033d0:	08003425 	.word	0x08003425
 80033d4:	080033a1 	.word	0x080033a1
 80033d8:	080033a1 	.word	0x080033a1
 80033dc:	080033a1 	.word	0x080033a1
 80033e0:	080033a1 	.word	0x080033a1
 80033e4:	08003531 	.word	0x08003531
 80033e8:	08003455 	.word	0x08003455
 80033ec:	08003513 	.word	0x08003513
 80033f0:	080033a1 	.word	0x080033a1
 80033f4:	080033a1 	.word	0x080033a1
 80033f8:	08003553 	.word	0x08003553
 80033fc:	080033a1 	.word	0x080033a1
 8003400:	08003455 	.word	0x08003455
 8003404:	080033a1 	.word	0x080033a1
 8003408:	080033a1 	.word	0x080033a1
 800340c:	0800351b 	.word	0x0800351b
 8003410:	680b      	ldr	r3, [r1, #0]
 8003412:	1d1a      	adds	r2, r3, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	600a      	str	r2, [r1, #0]
 8003418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800341c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003420:	2301      	movs	r3, #1
 8003422:	e0a3      	b.n	800356c <_printf_i+0x1f4>
 8003424:	6825      	ldr	r5, [r4, #0]
 8003426:	6808      	ldr	r0, [r1, #0]
 8003428:	062e      	lsls	r6, r5, #24
 800342a:	f100 0304 	add.w	r3, r0, #4
 800342e:	d50a      	bpl.n	8003446 <_printf_i+0xce>
 8003430:	6805      	ldr	r5, [r0, #0]
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	2d00      	cmp	r5, #0
 8003436:	da03      	bge.n	8003440 <_printf_i+0xc8>
 8003438:	232d      	movs	r3, #45	; 0x2d
 800343a:	426d      	negs	r5, r5
 800343c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003440:	485e      	ldr	r0, [pc, #376]	; (80035bc <_printf_i+0x244>)
 8003442:	230a      	movs	r3, #10
 8003444:	e019      	b.n	800347a <_printf_i+0x102>
 8003446:	f015 0f40 	tst.w	r5, #64	; 0x40
 800344a:	6805      	ldr	r5, [r0, #0]
 800344c:	600b      	str	r3, [r1, #0]
 800344e:	bf18      	it	ne
 8003450:	b22d      	sxthne	r5, r5
 8003452:	e7ef      	b.n	8003434 <_printf_i+0xbc>
 8003454:	680b      	ldr	r3, [r1, #0]
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	1d18      	adds	r0, r3, #4
 800345a:	6008      	str	r0, [r1, #0]
 800345c:	0628      	lsls	r0, r5, #24
 800345e:	d501      	bpl.n	8003464 <_printf_i+0xec>
 8003460:	681d      	ldr	r5, [r3, #0]
 8003462:	e002      	b.n	800346a <_printf_i+0xf2>
 8003464:	0669      	lsls	r1, r5, #25
 8003466:	d5fb      	bpl.n	8003460 <_printf_i+0xe8>
 8003468:	881d      	ldrh	r5, [r3, #0]
 800346a:	4854      	ldr	r0, [pc, #336]	; (80035bc <_printf_i+0x244>)
 800346c:	2f6f      	cmp	r7, #111	; 0x6f
 800346e:	bf0c      	ite	eq
 8003470:	2308      	moveq	r3, #8
 8003472:	230a      	movne	r3, #10
 8003474:	2100      	movs	r1, #0
 8003476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800347a:	6866      	ldr	r6, [r4, #4]
 800347c:	60a6      	str	r6, [r4, #8]
 800347e:	2e00      	cmp	r6, #0
 8003480:	bfa2      	ittt	ge
 8003482:	6821      	ldrge	r1, [r4, #0]
 8003484:	f021 0104 	bicge.w	r1, r1, #4
 8003488:	6021      	strge	r1, [r4, #0]
 800348a:	b90d      	cbnz	r5, 8003490 <_printf_i+0x118>
 800348c:	2e00      	cmp	r6, #0
 800348e:	d04d      	beq.n	800352c <_printf_i+0x1b4>
 8003490:	4616      	mov	r6, r2
 8003492:	fbb5 f1f3 	udiv	r1, r5, r3
 8003496:	fb03 5711 	mls	r7, r3, r1, r5
 800349a:	5dc7      	ldrb	r7, [r0, r7]
 800349c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034a0:	462f      	mov	r7, r5
 80034a2:	42bb      	cmp	r3, r7
 80034a4:	460d      	mov	r5, r1
 80034a6:	d9f4      	bls.n	8003492 <_printf_i+0x11a>
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d10b      	bne.n	80034c4 <_printf_i+0x14c>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	07df      	lsls	r7, r3, #31
 80034b0:	d508      	bpl.n	80034c4 <_printf_i+0x14c>
 80034b2:	6923      	ldr	r3, [r4, #16]
 80034b4:	6861      	ldr	r1, [r4, #4]
 80034b6:	4299      	cmp	r1, r3
 80034b8:	bfde      	ittt	le
 80034ba:	2330      	movle	r3, #48	; 0x30
 80034bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034c4:	1b92      	subs	r2, r2, r6
 80034c6:	6122      	str	r2, [r4, #16]
 80034c8:	f8cd a000 	str.w	sl, [sp]
 80034cc:	464b      	mov	r3, r9
 80034ce:	aa03      	add	r2, sp, #12
 80034d0:	4621      	mov	r1, r4
 80034d2:	4640      	mov	r0, r8
 80034d4:	f7ff fee2 	bl	800329c <_printf_common>
 80034d8:	3001      	adds	r0, #1
 80034da:	d14c      	bne.n	8003576 <_printf_i+0x1fe>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	b004      	add	sp, #16
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	4835      	ldr	r0, [pc, #212]	; (80035bc <_printf_i+0x244>)
 80034e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	680e      	ldr	r6, [r1, #0]
 80034f0:	061f      	lsls	r7, r3, #24
 80034f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80034f6:	600e      	str	r6, [r1, #0]
 80034f8:	d514      	bpl.n	8003524 <_printf_i+0x1ac>
 80034fa:	07d9      	lsls	r1, r3, #31
 80034fc:	bf44      	itt	mi
 80034fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003502:	6023      	strmi	r3, [r4, #0]
 8003504:	b91d      	cbnz	r5, 800350e <_printf_i+0x196>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	f023 0320 	bic.w	r3, r3, #32
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	2310      	movs	r3, #16
 8003510:	e7b0      	b.n	8003474 <_printf_i+0xfc>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	2378      	movs	r3, #120	; 0x78
 800351c:	4828      	ldr	r0, [pc, #160]	; (80035c0 <_printf_i+0x248>)
 800351e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003522:	e7e3      	b.n	80034ec <_printf_i+0x174>
 8003524:	065e      	lsls	r6, r3, #25
 8003526:	bf48      	it	mi
 8003528:	b2ad      	uxthmi	r5, r5
 800352a:	e7e6      	b.n	80034fa <_printf_i+0x182>
 800352c:	4616      	mov	r6, r2
 800352e:	e7bb      	b.n	80034a8 <_printf_i+0x130>
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	6826      	ldr	r6, [r4, #0]
 8003534:	6960      	ldr	r0, [r4, #20]
 8003536:	1d1d      	adds	r5, r3, #4
 8003538:	600d      	str	r5, [r1, #0]
 800353a:	0635      	lsls	r5, r6, #24
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	d501      	bpl.n	8003544 <_printf_i+0x1cc>
 8003540:	6018      	str	r0, [r3, #0]
 8003542:	e002      	b.n	800354a <_printf_i+0x1d2>
 8003544:	0671      	lsls	r1, r6, #25
 8003546:	d5fb      	bpl.n	8003540 <_printf_i+0x1c8>
 8003548:	8018      	strh	r0, [r3, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	6123      	str	r3, [r4, #16]
 800354e:	4616      	mov	r6, r2
 8003550:	e7ba      	b.n	80034c8 <_printf_i+0x150>
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	1d1a      	adds	r2, r3, #4
 8003556:	600a      	str	r2, [r1, #0]
 8003558:	681e      	ldr	r6, [r3, #0]
 800355a:	6862      	ldr	r2, [r4, #4]
 800355c:	2100      	movs	r1, #0
 800355e:	4630      	mov	r0, r6
 8003560:	f7fc fe3e 	bl	80001e0 <memchr>
 8003564:	b108      	cbz	r0, 800356a <_printf_i+0x1f2>
 8003566:	1b80      	subs	r0, r0, r6
 8003568:	6060      	str	r0, [r4, #4]
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	6123      	str	r3, [r4, #16]
 800356e:	2300      	movs	r3, #0
 8003570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003574:	e7a8      	b.n	80034c8 <_printf_i+0x150>
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	4632      	mov	r2, r6
 800357a:	4649      	mov	r1, r9
 800357c:	4640      	mov	r0, r8
 800357e:	47d0      	blx	sl
 8003580:	3001      	adds	r0, #1
 8003582:	d0ab      	beq.n	80034dc <_printf_i+0x164>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	079b      	lsls	r3, r3, #30
 8003588:	d413      	bmi.n	80035b2 <_printf_i+0x23a>
 800358a:	68e0      	ldr	r0, [r4, #12]
 800358c:	9b03      	ldr	r3, [sp, #12]
 800358e:	4298      	cmp	r0, r3
 8003590:	bfb8      	it	lt
 8003592:	4618      	movlt	r0, r3
 8003594:	e7a4      	b.n	80034e0 <_printf_i+0x168>
 8003596:	2301      	movs	r3, #1
 8003598:	4632      	mov	r2, r6
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	47d0      	blx	sl
 80035a0:	3001      	adds	r0, #1
 80035a2:	d09b      	beq.n	80034dc <_printf_i+0x164>
 80035a4:	3501      	adds	r5, #1
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	9903      	ldr	r1, [sp, #12]
 80035aa:	1a5b      	subs	r3, r3, r1
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dcf2      	bgt.n	8003596 <_printf_i+0x21e>
 80035b0:	e7eb      	b.n	800358a <_printf_i+0x212>
 80035b2:	2500      	movs	r5, #0
 80035b4:	f104 0619 	add.w	r6, r4, #25
 80035b8:	e7f5      	b.n	80035a6 <_printf_i+0x22e>
 80035ba:	bf00      	nop
 80035bc:	08003831 	.word	0x08003831
 80035c0:	08003842 	.word	0x08003842

080035c4 <memmove>:
 80035c4:	4288      	cmp	r0, r1
 80035c6:	b510      	push	{r4, lr}
 80035c8:	eb01 0402 	add.w	r4, r1, r2
 80035cc:	d902      	bls.n	80035d4 <memmove+0x10>
 80035ce:	4284      	cmp	r4, r0
 80035d0:	4623      	mov	r3, r4
 80035d2:	d807      	bhi.n	80035e4 <memmove+0x20>
 80035d4:	1e43      	subs	r3, r0, #1
 80035d6:	42a1      	cmp	r1, r4
 80035d8:	d008      	beq.n	80035ec <memmove+0x28>
 80035da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035e2:	e7f8      	b.n	80035d6 <memmove+0x12>
 80035e4:	4402      	add	r2, r0
 80035e6:	4601      	mov	r1, r0
 80035e8:	428a      	cmp	r2, r1
 80035ea:	d100      	bne.n	80035ee <memmove+0x2a>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035f6:	e7f7      	b.n	80035e8 <memmove+0x24>

080035f8 <_free_r>:
 80035f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035fa:	2900      	cmp	r1, #0
 80035fc:	d048      	beq.n	8003690 <_free_r+0x98>
 80035fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003602:	9001      	str	r0, [sp, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f1a1 0404 	sub.w	r4, r1, #4
 800360a:	bfb8      	it	lt
 800360c:	18e4      	addlt	r4, r4, r3
 800360e:	f000 f8d3 	bl	80037b8 <__malloc_lock>
 8003612:	4a20      	ldr	r2, [pc, #128]	; (8003694 <_free_r+0x9c>)
 8003614:	9801      	ldr	r0, [sp, #4]
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	4615      	mov	r5, r2
 800361a:	b933      	cbnz	r3, 800362a <_free_r+0x32>
 800361c:	6063      	str	r3, [r4, #4]
 800361e:	6014      	str	r4, [r2, #0]
 8003620:	b003      	add	sp, #12
 8003622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003626:	f000 b8cd 	b.w	80037c4 <__malloc_unlock>
 800362a:	42a3      	cmp	r3, r4
 800362c:	d90b      	bls.n	8003646 <_free_r+0x4e>
 800362e:	6821      	ldr	r1, [r4, #0]
 8003630:	1862      	adds	r2, r4, r1
 8003632:	4293      	cmp	r3, r2
 8003634:	bf04      	itt	eq
 8003636:	681a      	ldreq	r2, [r3, #0]
 8003638:	685b      	ldreq	r3, [r3, #4]
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	bf04      	itt	eq
 800363e:	1852      	addeq	r2, r2, r1
 8003640:	6022      	streq	r2, [r4, #0]
 8003642:	602c      	str	r4, [r5, #0]
 8003644:	e7ec      	b.n	8003620 <_free_r+0x28>
 8003646:	461a      	mov	r2, r3
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	b10b      	cbz	r3, 8003650 <_free_r+0x58>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d9fa      	bls.n	8003646 <_free_r+0x4e>
 8003650:	6811      	ldr	r1, [r2, #0]
 8003652:	1855      	adds	r5, r2, r1
 8003654:	42a5      	cmp	r5, r4
 8003656:	d10b      	bne.n	8003670 <_free_r+0x78>
 8003658:	6824      	ldr	r4, [r4, #0]
 800365a:	4421      	add	r1, r4
 800365c:	1854      	adds	r4, r2, r1
 800365e:	42a3      	cmp	r3, r4
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	d1dd      	bne.n	8003620 <_free_r+0x28>
 8003664:	681c      	ldr	r4, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	6053      	str	r3, [r2, #4]
 800366a:	4421      	add	r1, r4
 800366c:	6011      	str	r1, [r2, #0]
 800366e:	e7d7      	b.n	8003620 <_free_r+0x28>
 8003670:	d902      	bls.n	8003678 <_free_r+0x80>
 8003672:	230c      	movs	r3, #12
 8003674:	6003      	str	r3, [r0, #0]
 8003676:	e7d3      	b.n	8003620 <_free_r+0x28>
 8003678:	6825      	ldr	r5, [r4, #0]
 800367a:	1961      	adds	r1, r4, r5
 800367c:	428b      	cmp	r3, r1
 800367e:	bf04      	itt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	6063      	str	r3, [r4, #4]
 8003686:	bf04      	itt	eq
 8003688:	1949      	addeq	r1, r1, r5
 800368a:	6021      	streq	r1, [r4, #0]
 800368c:	6054      	str	r4, [r2, #4]
 800368e:	e7c7      	b.n	8003620 <_free_r+0x28>
 8003690:	b003      	add	sp, #12
 8003692:	bd30      	pop	{r4, r5, pc}
 8003694:	200000ec 	.word	0x200000ec

08003698 <_malloc_r>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	1ccd      	adds	r5, r1, #3
 800369c:	f025 0503 	bic.w	r5, r5, #3
 80036a0:	3508      	adds	r5, #8
 80036a2:	2d0c      	cmp	r5, #12
 80036a4:	bf38      	it	cc
 80036a6:	250c      	movcc	r5, #12
 80036a8:	2d00      	cmp	r5, #0
 80036aa:	4606      	mov	r6, r0
 80036ac:	db01      	blt.n	80036b2 <_malloc_r+0x1a>
 80036ae:	42a9      	cmp	r1, r5
 80036b0:	d903      	bls.n	80036ba <_malloc_r+0x22>
 80036b2:	230c      	movs	r3, #12
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	2000      	movs	r0, #0
 80036b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ba:	f000 f87d 	bl	80037b8 <__malloc_lock>
 80036be:	4921      	ldr	r1, [pc, #132]	; (8003744 <_malloc_r+0xac>)
 80036c0:	680a      	ldr	r2, [r1, #0]
 80036c2:	4614      	mov	r4, r2
 80036c4:	b99c      	cbnz	r4, 80036ee <_malloc_r+0x56>
 80036c6:	4f20      	ldr	r7, [pc, #128]	; (8003748 <_malloc_r+0xb0>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b923      	cbnz	r3, 80036d6 <_malloc_r+0x3e>
 80036cc:	4621      	mov	r1, r4
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 f862 	bl	8003798 <_sbrk_r>
 80036d4:	6038      	str	r0, [r7, #0]
 80036d6:	4629      	mov	r1, r5
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 f85d 	bl	8003798 <_sbrk_r>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d123      	bne.n	800372a <_malloc_r+0x92>
 80036e2:	230c      	movs	r3, #12
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	4630      	mov	r0, r6
 80036e8:	f000 f86c 	bl	80037c4 <__malloc_unlock>
 80036ec:	e7e3      	b.n	80036b6 <_malloc_r+0x1e>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	1b5b      	subs	r3, r3, r5
 80036f2:	d417      	bmi.n	8003724 <_malloc_r+0x8c>
 80036f4:	2b0b      	cmp	r3, #11
 80036f6:	d903      	bls.n	8003700 <_malloc_r+0x68>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	441c      	add	r4, r3
 80036fc:	6025      	str	r5, [r4, #0]
 80036fe:	e004      	b.n	800370a <_malloc_r+0x72>
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	42a2      	cmp	r2, r4
 8003704:	bf0c      	ite	eq
 8003706:	600b      	streq	r3, [r1, #0]
 8003708:	6053      	strne	r3, [r2, #4]
 800370a:	4630      	mov	r0, r6
 800370c:	f000 f85a 	bl	80037c4 <__malloc_unlock>
 8003710:	f104 000b 	add.w	r0, r4, #11
 8003714:	1d23      	adds	r3, r4, #4
 8003716:	f020 0007 	bic.w	r0, r0, #7
 800371a:	1ac2      	subs	r2, r0, r3
 800371c:	d0cc      	beq.n	80036b8 <_malloc_r+0x20>
 800371e:	1a1b      	subs	r3, r3, r0
 8003720:	50a3      	str	r3, [r4, r2]
 8003722:	e7c9      	b.n	80036b8 <_malloc_r+0x20>
 8003724:	4622      	mov	r2, r4
 8003726:	6864      	ldr	r4, [r4, #4]
 8003728:	e7cc      	b.n	80036c4 <_malloc_r+0x2c>
 800372a:	1cc4      	adds	r4, r0, #3
 800372c:	f024 0403 	bic.w	r4, r4, #3
 8003730:	42a0      	cmp	r0, r4
 8003732:	d0e3      	beq.n	80036fc <_malloc_r+0x64>
 8003734:	1a21      	subs	r1, r4, r0
 8003736:	4630      	mov	r0, r6
 8003738:	f000 f82e 	bl	8003798 <_sbrk_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d1dd      	bne.n	80036fc <_malloc_r+0x64>
 8003740:	e7cf      	b.n	80036e2 <_malloc_r+0x4a>
 8003742:	bf00      	nop
 8003744:	200000ec 	.word	0x200000ec
 8003748:	200000f0 	.word	0x200000f0

0800374c <_realloc_r>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	4607      	mov	r7, r0
 8003750:	4614      	mov	r4, r2
 8003752:	460e      	mov	r6, r1
 8003754:	b921      	cbnz	r1, 8003760 <_realloc_r+0x14>
 8003756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800375a:	4611      	mov	r1, r2
 800375c:	f7ff bf9c 	b.w	8003698 <_malloc_r>
 8003760:	b922      	cbnz	r2, 800376c <_realloc_r+0x20>
 8003762:	f7ff ff49 	bl	80035f8 <_free_r>
 8003766:	4625      	mov	r5, r4
 8003768:	4628      	mov	r0, r5
 800376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376c:	f000 f830 	bl	80037d0 <_malloc_usable_size_r>
 8003770:	42a0      	cmp	r0, r4
 8003772:	d20f      	bcs.n	8003794 <_realloc_r+0x48>
 8003774:	4621      	mov	r1, r4
 8003776:	4638      	mov	r0, r7
 8003778:	f7ff ff8e 	bl	8003698 <_malloc_r>
 800377c:	4605      	mov	r5, r0
 800377e:	2800      	cmp	r0, #0
 8003780:	d0f2      	beq.n	8003768 <_realloc_r+0x1c>
 8003782:	4631      	mov	r1, r6
 8003784:	4622      	mov	r2, r4
 8003786:	f7ff fbe3 	bl	8002f50 <memcpy>
 800378a:	4631      	mov	r1, r6
 800378c:	4638      	mov	r0, r7
 800378e:	f7ff ff33 	bl	80035f8 <_free_r>
 8003792:	e7e9      	b.n	8003768 <_realloc_r+0x1c>
 8003794:	4635      	mov	r5, r6
 8003796:	e7e7      	b.n	8003768 <_realloc_r+0x1c>

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d06      	ldr	r5, [pc, #24]	; (80037b4 <_sbrk_r+0x1c>)
 800379c:	2300      	movs	r3, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd fb38 	bl	8000e18 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_sbrk_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_sbrk_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	200001c4 	.word	0x200001c4

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_lock+0x8>)
 80037ba:	f000 b811 	b.w	80037e0 <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	200001cc 	.word	0x200001cc

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_unlock+0x8>)
 80037c6:	f000 b80c 	b.w	80037e2 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	200001cc 	.word	0x200001cc

080037d0 <_malloc_usable_size_r>:
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f18      	subs	r0, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfbc      	itt	lt
 80037da:	580b      	ldrlt	r3, [r1, r0]
 80037dc:	18c0      	addlt	r0, r0, r3
 80037de:	4770      	bx	lr

080037e0 <__retarget_lock_acquire_recursive>:
 80037e0:	4770      	bx	lr

080037e2 <__retarget_lock_release_recursive>:
 80037e2:	4770      	bx	lr

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
